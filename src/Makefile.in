# Makefile.in generated by automake 1.9.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = dna_ConvertSffToFasta$(EXEEXT) \
	dna_MergeContigs$(EXEEXT) dna_BuildGraph$(EXEEXT) \
	dna_ScaffoldContigs$(EXEEXT) dna_ExtractContigs$(EXEEXT) \
	dna_KeepLargeContigs$(EXEEXT) dna_ConvertFastaToAfg$(EXEEXT) \
	dna_JoinContigs$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in TODO
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_dna_BuildGraph_OBJECTS =  \
	De_Bruijn_De_Novo_Assembler_main.$(OBJEXT) Read.$(OBJEXT) \
	DeBruijnAssembler.$(OBJEXT) Loader.$(OBJEXT) \
	SffLoader.$(OBJEXT) VertexData.$(OBJEXT) \
	SequenceDataFull.$(OBJEXT) CoverageDistribution.$(OBJEXT) \
	SortedList.$(OBJEXT) GraphData.$(OBJEXT) \
	BinarySearch.$(OBJEXT) Merger.$(OBJEXT) \
	common_functions.$(OBJEXT)
dna_BuildGraph_OBJECTS = $(am_dna_BuildGraph_OBJECTS)
dna_BuildGraph_LDADD = $(LDADD)
am_dna_ConvertFastaToAfg_OBJECTS = fasta_to_afg_main.$(OBJEXT) \
	Read.$(OBJEXT) DeBruijnAssembler.$(OBJEXT) Loader.$(OBJEXT) \
	SffLoader.$(OBJEXT) VertexData.$(OBJEXT) \
	SequenceDataFull.$(OBJEXT) CoverageDistribution.$(OBJEXT) \
	SortedList.$(OBJEXT) GraphData.$(OBJEXT) \
	BinarySearch.$(OBJEXT) common_functions.$(OBJEXT)
dna_ConvertFastaToAfg_OBJECTS = $(am_dna_ConvertFastaToAfg_OBJECTS)
dna_ConvertFastaToAfg_LDADD = $(LDADD)
am_dna_ConvertSffToFasta_OBJECTS = SffLoader.$(OBJEXT) Read.$(OBJEXT) \
	DeBruijnAssembler.$(OBJEXT) sffPairedToFasta_main.$(OBJEXT) \
	Loader.$(OBJEXT) SequenceDataFull.$(OBJEXT) \
	CoverageDistribution.$(OBJEXT) SortedList.$(OBJEXT) \
	VertexData.$(OBJEXT) GraphData.$(OBJEXT) \
	BinarySearch.$(OBJEXT) common_functions.$(OBJEXT)
dna_ConvertSffToFasta_OBJECTS = $(am_dna_ConvertSffToFasta_OBJECTS)
dna_ConvertSffToFasta_LDADD = $(LDADD)
am_dna_ExtractContigs_OBJECTS = extract_contigs_main.$(OBJEXT) \
	Read.$(OBJEXT) DeBruijnAssembler.$(OBJEXT) Loader.$(OBJEXT) \
	SffLoader.$(OBJEXT) VertexData.$(OBJEXT) \
	SequenceDataFull.$(OBJEXT) CoverageDistribution.$(OBJEXT) \
	SortedList.$(OBJEXT) GraphData.$(OBJEXT) \
	BinarySearch.$(OBJEXT) Merger.$(OBJEXT) \
	common_functions.$(OBJEXT)
dna_ExtractContigs_OBJECTS = $(am_dna_ExtractContigs_OBJECTS)
dna_ExtractContigs_LDADD = $(LDADD)
am_dna_JoinContigs_OBJECTS = Read.$(OBJEXT) module_join_main.$(OBJEXT) \
	DeBruijnAssembler.$(OBJEXT) Loader.$(OBJEXT) \
	SffLoader.$(OBJEXT) VertexData.$(OBJEXT) \
	SequenceDataFull.$(OBJEXT) CoverageDistribution.$(OBJEXT) \
	SortedList.$(OBJEXT) GraphData.$(OBJEXT) \
	BinarySearch.$(OBJEXT) Merger.$(OBJEXT) \
	common_functions.$(OBJEXT)
dna_JoinContigs_OBJECTS = $(am_dna_JoinContigs_OBJECTS)
dna_JoinContigs_LDADD = $(LDADD)
am_dna_KeepLargeContigs_OBJECTS = keepLargeContigs_main.$(OBJEXT) \
	Read.$(OBJEXT) Loader.$(OBJEXT) common_functions.$(OBJEXT) \
	SffLoader.$(OBJEXT)
dna_KeepLargeContigs_OBJECTS = $(am_dna_KeepLargeContigs_OBJECTS)
dna_KeepLargeContigs_LDADD = $(LDADD)
am_dna_MergeContigs_OBJECTS = merger_main.$(OBJEXT) Read.$(OBJEXT) \
	DeBruijnAssembler.$(OBJEXT) Loader.$(OBJEXT) \
	SffLoader.$(OBJEXT) VertexData.$(OBJEXT) \
	SequenceDataFull.$(OBJEXT) CoverageDistribution.$(OBJEXT) \
	SortedList.$(OBJEXT) GraphData.$(OBJEXT) \
	BinarySearch.$(OBJEXT) Merger.$(OBJEXT) \
	common_functions.$(OBJEXT)
dna_MergeContigs_OBJECTS = $(am_dna_MergeContigs_OBJECTS)
dna_MergeContigs_LDADD = $(LDADD)
am_dna_ScaffoldContigs_OBJECTS = CoverageDistribution.$(OBJEXT) \
	scaffolder_main.$(OBJEXT) Read.$(OBJEXT) \
	DeBruijnAssembler.$(OBJEXT) Loader.$(OBJEXT) \
	SffLoader.$(OBJEXT) SequenceDataFull.$(OBJEXT) \
	SortedList.$(OBJEXT) VertexData.$(OBJEXT) GraphData.$(OBJEXT) \
	BinarySearch.$(OBJEXT) common_functions.$(OBJEXT)
dna_ScaffoldContigs_OBJECTS = $(am_dna_ScaffoldContigs_OBJECTS)
dna_ScaffoldContigs_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(dna_BuildGraph_SOURCES) $(dna_ConvertFastaToAfg_SOURCES) \
	$(dna_ConvertSffToFasta_SOURCES) $(dna_ExtractContigs_SOURCES) \
	$(dna_JoinContigs_SOURCES) $(dna_KeepLargeContigs_SOURCES) \
	$(dna_MergeContigs_SOURCES) $(dna_ScaffoldContigs_SOURCES)
DIST_SOURCES = $(dna_BuildGraph_SOURCES) \
	$(dna_ConvertFastaToAfg_SOURCES) \
	$(dna_ConvertSffToFasta_SOURCES) $(dna_ExtractContigs_SOURCES) \
	$(dna_JoinContigs_SOURCES) $(dna_KeepLargeContigs_SOURCES) \
	$(dna_MergeContigs_SOURCES) $(dna_ScaffoldContigs_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCAS = @CCAS@
CCASFLAGS = @CCASFLAGS@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EXEEXT = @EXEEXT@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_STRIP = @ac_ct_STRIP@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@
am__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build_alias = @build_alias@
datadir = @datadir@
exec_prefix = @exec_prefix@
host_alias = @host_alias@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
prefix = @prefix@
program_transform_name = @program_transform_name@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@

# dna_ConvertFastaToSql_SOURCES =  dump_sql_main.cpp  common_functions.h common_functions.cpp
dna_BuildGraph_SOURCES = De_Bruijn_De_Novo_Assembler_main.cpp  DeBruijnAssembler.h  Read.cpp \
DeBruijnAssembler.cpp                               Read.h Loader.cpp Loader.h  SffLoader.h SffLoader.cpp \
VertexData.h VertexData.cpp  SequenceDataFull.h SequenceDataFull.cpp CoverageDistribution.h CoverageDistribution.cpp \
SortedList.h SortedList.cpp GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp Merger.h Merger.cpp    common_functions.h common_functions.cpp

dna_ExtractContigs_SOURCES = extract_contigs_main.cpp  DeBruijnAssembler.h  Read.cpp \
DeBruijnAssembler.cpp                               Read.h Loader.cpp Loader.h  SffLoader.h SffLoader.cpp \
VertexData.h VertexData.cpp  SequenceDataFull.h SequenceDataFull.cpp CoverageDistribution.h CoverageDistribution.cpp \
SortedList.h SortedList.cpp GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp Merger.h Merger.cpp    common_functions.h common_functions.cpp

dna_KeepLargeContigs_SOURCES = keepLargeContigs_main.cpp Read.h Read.cpp Loader.cpp Loader.h common_functions.h common_functions.cpp SffLoader.h  SffLoader.cpp
dna_SplitReads_SOURCES = LightVertex.h LightVertex.cpp  \
SortedList.h SortedList.cpp GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp GraphDataLight.h GraphDataLight.cpp \
splitter_main.cpp Loader.cpp Read.cpp DeBruijnAssembler.cpp VertexData.cpp SequenceDataFull.cpp SffLoader.cpp \
CoverageDistribution.h CoverageDistribution.cpp  

dna_MergeContigs_SOURCES = merger_main.cpp  Read.cpp DeBruijnAssembler.cpp Loader.cpp SffLoader.cpp VertexData.cpp SequenceDataFull.cpp  CoverageDistribution.h CoverageDistribution.cpp \
SortedList.h SortedList.cpp GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp Merger.h Merger.cpp   common_functions.h common_functions.cpp

dna_ScaffoldContigs_SOURCES = CoverageDistribution.h CoverageDistribution.cpp scaffolder_main.cpp  Read.cpp DeBruijnAssembler.cpp Loader.cpp SffLoader.cpp  SequenceDataFull.cpp \
 SortedList.h SortedList.cpp VertexData.h VertexData.cpp   GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp   common_functions.h common_functions.cpp

dna_ConvertSffToFasta_SOURCES = SffLoader.cpp SffLoader.h Read.h Read.cpp DeBruijnAssembler.cpp DeBruijnAssembler.h sffPairedToFasta_main.cpp  \
CustomMap.hpp  Loader.cpp Loader.h SequenceDataFull.h SequenceDataFull.cpp  CoverageDistribution.h CoverageDistribution.cpp \
SortedList.h SortedList.cpp VertexData.cpp VertexData.h  GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp   common_functions.h common_functions.cpp

dna_ConvertFastaToAfg_SOURCES = fasta_to_afg_main.cpp  Read.cpp DeBruijnAssembler.cpp Loader.cpp SffLoader.cpp VertexData.cpp SequenceDataFull.cpp  CoverageDistribution.h CoverageDistribution.cpp \
SortedList.h SortedList.cpp  GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp   common_functions.h common_functions.cpp

dna_JoinContigs_SOURCES = DeBruijnAssembler.h  Read.cpp module_join_main.cpp \
DeBruijnAssembler.cpp                               Read.h Loader.cpp Loader.h  SffLoader.h SffLoader.cpp \
VertexData.h VertexData.cpp  SequenceDataFull.h SequenceDataFull.cpp CoverageDistribution.h CoverageDistribution.cpp \
SortedList.h SortedList.cpp GraphData.h GraphData.cpp BinarySearch.h BinarySearch.cpp Merger.h Merger.cpp   common_functions.h common_functions.cpp

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
dna_BuildGraph$(EXEEXT): $(dna_BuildGraph_OBJECTS) $(dna_BuildGraph_DEPENDENCIES) 
	@rm -f dna_BuildGraph$(EXEEXT)
	$(CXXLINK) $(dna_BuildGraph_LDFLAGS) $(dna_BuildGraph_OBJECTS) $(dna_BuildGraph_LDADD) $(LIBS)
dna_ConvertFastaToAfg$(EXEEXT): $(dna_ConvertFastaToAfg_OBJECTS) $(dna_ConvertFastaToAfg_DEPENDENCIES) 
	@rm -f dna_ConvertFastaToAfg$(EXEEXT)
	$(CXXLINK) $(dna_ConvertFastaToAfg_LDFLAGS) $(dna_ConvertFastaToAfg_OBJECTS) $(dna_ConvertFastaToAfg_LDADD) $(LIBS)
dna_ConvertSffToFasta$(EXEEXT): $(dna_ConvertSffToFasta_OBJECTS) $(dna_ConvertSffToFasta_DEPENDENCIES) 
	@rm -f dna_ConvertSffToFasta$(EXEEXT)
	$(CXXLINK) $(dna_ConvertSffToFasta_LDFLAGS) $(dna_ConvertSffToFasta_OBJECTS) $(dna_ConvertSffToFasta_LDADD) $(LIBS)
dna_ExtractContigs$(EXEEXT): $(dna_ExtractContigs_OBJECTS) $(dna_ExtractContigs_DEPENDENCIES) 
	@rm -f dna_ExtractContigs$(EXEEXT)
	$(CXXLINK) $(dna_ExtractContigs_LDFLAGS) $(dna_ExtractContigs_OBJECTS) $(dna_ExtractContigs_LDADD) $(LIBS)
dna_JoinContigs$(EXEEXT): $(dna_JoinContigs_OBJECTS) $(dna_JoinContigs_DEPENDENCIES) 
	@rm -f dna_JoinContigs$(EXEEXT)
	$(CXXLINK) $(dna_JoinContigs_LDFLAGS) $(dna_JoinContigs_OBJECTS) $(dna_JoinContigs_LDADD) $(LIBS)
dna_KeepLargeContigs$(EXEEXT): $(dna_KeepLargeContigs_OBJECTS) $(dna_KeepLargeContigs_DEPENDENCIES) 
	@rm -f dna_KeepLargeContigs$(EXEEXT)
	$(CXXLINK) $(dna_KeepLargeContigs_LDFLAGS) $(dna_KeepLargeContigs_OBJECTS) $(dna_KeepLargeContigs_LDADD) $(LIBS)
dna_MergeContigs$(EXEEXT): $(dna_MergeContigs_OBJECTS) $(dna_MergeContigs_DEPENDENCIES) 
	@rm -f dna_MergeContigs$(EXEEXT)
	$(CXXLINK) $(dna_MergeContigs_LDFLAGS) $(dna_MergeContigs_OBJECTS) $(dna_MergeContigs_LDADD) $(LIBS)
dna_ScaffoldContigs$(EXEEXT): $(dna_ScaffoldContigs_OBJECTS) $(dna_ScaffoldContigs_DEPENDENCIES) 
	@rm -f dna_ScaffoldContigs$(EXEEXT)
	$(CXXLINK) $(dna_ScaffoldContigs_LDFLAGS) $(dna_ScaffoldContigs_OBJECTS) $(dna_ScaffoldContigs_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/BinarySearch.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/CoverageDistribution.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DeBruijnAssembler.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/De_Bruijn_De_Novo_Assembler_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/GraphData.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Loader.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Merger.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Read.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SequenceDataFull.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SffLoader.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SortedList.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/VertexData.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/common_functions.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extract_contigs_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fasta_to_afg_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/keepLargeContigs_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/merger_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/module_join_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scaffolder_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sffPairedToFasta_main.Po@am__quote@

.cpp.o:
@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
